/*
import com.github.jk1.license.render.*
import com.github.jk1.license.importer.*
*/

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.moowork.gradle:gradle-node-plugin:0.13"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "org.grails.plugins:views-gradle:1.1.6"
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
        //classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.5'
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.1"



    }
}
plugins {
    id "com.github.hierynomus.license" version "0.14.0"
}
group 'rotatingFans.ABOS'
version '2.2.4'

description "ABOS"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin: 'java'
apply plugin:"org.grails.grails-web"
apply plugin:"com.moowork.node"
apply plugin:"org.grails.plugins.views-json"

apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
//apply plugin:"codenarc"
//apply plugin: 'com.google.cloud.tools.appengine'
repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "file:///mnt/2ECB041354C3421E/Development/Java/ABOS-Server/repo" }
    maven { url "https://repo.maven.apache.org/maven2" }
    //maven { url "http://jcenter.bintray.com" }

}

dependencies {

    compile 'com.github.jsimone:webapp-runner:8.5.11.3'


    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    compile "org.grails.plugins:cache"
    compile "org.grails:grails-plugin-async"
    compile "org.grails.plugins:scaffolding"
   // compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.grails:grails-plugin-gsp"
    console "org.grails:grails-console"
   // profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.2"
/*    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"*/
    runtime "com.h2database:h2"
    testCompile "org.grails.plugins:geb"
/*    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"*/
    //tag::msyql[]
    compile 'mysql:mysql-connector-java:6.0.5'
    compile 'com.google.cloud.sql:mysql-socket-factory-connector-j-6:1.0.11'
    //end::msyql[]
    //tag::cloudstorage[]
  //  compile 'com.google.cloud:google-cloud-storage:1.49.0'

    compile 'org.grails.plugins:external-config:1.1.2'
    compile "org.codehaus.groovy:groovy-all:2.4.15"
    compile "org.codehaus.groovy:groovy-groovysh:2.4.15"

//    compile "com.google.api-client:google-api-client:1.25.0"
//    compile "com.google.api-client:google-api-client-appengine:1.25.0"
//    compile "com.google.api-client:google-api-client-servlet:1.25.0"
/*
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-starter-jetty"*/

/*    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-async"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache"
    compile "org.grails:grails-plugin-gsp"*/

    compile "org.grails.plugins:spring-security-rest:2.0.0.M2"
    compile 'org.grails.plugins:spring-security-core:3.1.2'
/*    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.3.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.3.Final"
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    console "org.grails:grails-console"*/

    profile "org.grails.profiles:react"
    //runtime "com.h2database:h2"
/*
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-datastore-rest-client"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
*/
    compile group: 'javax.cache', name: 'cache-api', version: '1.1.0'

    compile group: 'com.zaxxer', name: 'HikariCP', version:'2.7.8'
    compile group: 'org.apache.maven', name: 'maven-model', version:'3.3.9'
    compile group: 'com.mchange', name: 'c3p0', version:'0.9.5.2'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.7'
    compile group: 'com.lynden', name: 'GMapsFX', version:'2.12.0'
    compile group: 'org.flywaydb', name: 'flyway-core', version:'5.0.7'
    compile group: 'com.itextpdf', name: 'itextpdf', version:'5.5.10'
    compile group: 'com.itextpdf.tool', name: 'xmlworker', version:'5.5.10'
    compile group: 'net.sf.jtidy', name: 'jtidy', version: 'r938'
    compile group: 'net.sf.saxon', name: 'Saxon-HE', version: '9.9.0-1'
    compile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version:'5.0.1'
}
//configurations {
//    compile.exclude module: "tomcat-juli"
//    compile.exclude module: "spring-boot-starter-tomcat"
//    //compile.exclude module: "org.codehaus.groovy:groovy"
//}
bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}
/*
licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    outputDir = "$projectDir/build/licenses"

    // List the groups ids to exclude from dependency report.
    // By default project's own group is excluded.
    // For finer granularity, see: excludes.
    excludeGroups = ['do.not.want']

    // List the ids (in module:name format) to exclude from dependency report.
    // By default excludes is empty.
    excludes = ['moduleGroup:moduleName']

    // Set custom report renderer, implementing ReportRenderer.
    // Yes, you can write your own to support any format necessary.
    renderers = [new CsvReportRenderer('third-party-libs.xml')]

    // Set importers to import any external dependency information, i.e. from npm.
    // Custom importer should implement DependencyDataImporter interface.

    // Select projects to examine for dependencies.
    // Defaults to current project and all its subprojects
    projects = [project] + project.subprojects

    // Adjust the configurations to use, e.g. for Android projects.
    configurations = ['compile']
    // Use 'ALL' to dynamically resolve all configurations:
    // configurations = ALL
}*/
//appengine {  // App Engine tasks configuration
//
//
//    deploy {   // deploy configuration
//        project "abos-1536973204401"
//    }
//}

license {
    header project.file('HEADER')
    strictCheck false
    ignoreFailures true
    skipExistingHeaders true

}

downloadLicenses {
    ext.apacheTwo = license('Apache License, Version 2.0', 'http://opensource.org/licenses/Apache-2.0')
    ext.bsd = license('BSD License', 'http://www.opensource.org/licenses/bsd-license.php')
    ext.EPL1 = license('Eclipse Public License - v 1.0', 'https://www.eclipse.org/org/documents/epl-v10.php')
    ext.EPL2 = license('Eclipse Public License - v 2.0', 'https://www.eclipse.org/legal/epl-2.0/')

    includeProjectDependencies = true

    aliases = [
            (apacheTwo) : ['The Apache Software License, Version 2.0', 'Apache 2', 'Apache License Version 2.0', 'Apache License, Version 2.0', 'Apache License 2.0', 'Apache 2.0',
                           license('Apache License', 'http://www.apache.org/licenses/LICENSE-2.0')],
            (bsd) : ['BSD', license('New BSD License', 'http://www.opensource.org/licenses/bsd-license.php')],
            (EPL1) : ['Eclipse Public License - v 1.0', 'EPL 1.0', 'Eclipse Public License (EPL), Version 1.0', 'Eclipse Public License, Version 1.0', license('Eclipse Public License - v 1.0', 'https://www.eclipse.org/org/documents/epl-v10.php')],
            (EPL2) : ['Eclipse Public License V2.0', license('Eclipse Public License - v 2.0', 'https://www.eclipse.org/legal/epl-2.0/')]
    ]


}
task stage() {
    dependsOn clean, war
}
war.mustRunAfter clean

task copyToLib(type: Copy) {
    into "$buildDir/server"
    from(configurations.compile) {
        include "webapp-runner*"
    }
}

stage.dependsOn(copyToLib)
tasks.stage.doLast() {
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/assetCompile")
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/libs", exclude: "*.war")
}
sourceCompatibility = 1.8     // App Engine Flexible uses Java 8
targetCompatibility = 1.8     // App Engine Flexible uses Java 8
