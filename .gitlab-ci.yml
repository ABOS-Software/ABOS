image: rotatingfans/oraclejdk8-maven-alpine
stages:
  - Build
  - Tests
  - Deploy
cache:
  untracked: true
  paths:
    - repo/
before_script:
  - export VERSION=$(mvn -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec -q)
  - echo $VERSION
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  # - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl jq zip sed -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  ##
  ## Alternatively, assuming you created the SSH_SERVER_HOSTKEYS variable
  ## previously, uncomment the following two lines instead.
  ##
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts


  ##
  ## Optionally, if you will be using any Git commands, set the user name and
  ## and email.
  ##
  - git config --global user.email "patmagauran.j@gmail.com"
  - git config --global user.name "Patrick Magauran"

build:
  stage: Build
  script:
    - eval mvn clean compile package
    - mkdir output
    - cp LICENSE output/LICENSE
    - cp README.md output/README.md

    - cp target/ABOS-$VERSION-jar-with-dependencies.jar output/$VERSION.jar
  artifacts:
    paths:
      - output
  tags:
    - linux
Site:
  stage: Tests
  script:
    - eval mvn site
  artifacts:
    paths:
      - target/site
  tags:
    - linux
  only:
    - master
    - tags
pages:
  stage: Tests
  script:
    - eval mvn site
    - mkdir public
    - mv target/site/* public
  artifacts:
    paths:
      - public
  tags:
    - linux
  only:
    - Develop
deploy2MainSite:
  stage: Deploy
  allow_failure: true
  script:
    - curl https://gitlab.com/api/v4/projects/517415/repository/tags/$CI_COMMIT_TAG | jq '.message' > Changes.txt
    - git clone git@gitlab.com:ABOS-Software/abos-software.gitlab.io.git pages
    - cd pages
    - ls ..
    - zip Downloads/V$VERSION.zip ../output/*
    - '$(sed -i -- "s/latest: true/latest: false/g" _downloads/*)'
    - 'echo "---
            version: $VERSION
            changes:
              - change:
                description: $(cat ../Changes.txt)

            link: /Downloads/V$VERSION.zip
            latest: true
            ---" > _downloads/V$VERSION.md'
    - git add -A && git commit -m  "Update to V$VERSION" >/dev/null 2>&1
    - git push >/dev/null 2>&1
  tags:
    - linux
  only:
    - tags
deploy2docs:
  stage: Deploy
  allow_failure: true
  script:
    - curl https://gitlab.com/api/v4/projects/517415/repository/tags/$CI_COMMIT_TAG | jq '.message' > Changes.txt
    - git clone git@gitlab.com:ABOS-Software/ABOS-Docs.git pages-docs
    - cd pages-docs
    - 'echo "---
            title: V$VERSION
            type: minor
            ---
            $(cat ../Changes.txt)" > _posts/V$VERSION.md'
    - git add -A && git commit -m  "Update to V$VERSION" >/dev/null 2>&1
    - git push >/dev/null 2>&1
  tags:
    - linux
  only:
    - tags
deploy2master:
  stage: Deploy
  script:
    - git merge master
    - git checkout master
    - git merge --no-ff development
  tags:
    - linux
  only:
    - tags

